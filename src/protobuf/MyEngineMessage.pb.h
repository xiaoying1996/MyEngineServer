// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyEngineMessage.proto

#ifndef PROTOBUF_INCLUDED_MyEngineMessage_2eproto
#define PROTOBUF_INCLUDED_MyEngineMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MyEngineMessage_2eproto 

namespace protobuf_MyEngineMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MyEngineMessage_2eproto
namespace LoginMessage {
class MainMessage;
class MainMessageDefaultTypeInternal;
extern MainMessageDefaultTypeInternal _MainMessage_default_instance_;
class Name_Repeat_Check;
class Name_Repeat_CheckDefaultTypeInternal;
extern Name_Repeat_CheckDefaultTypeInternal _Name_Repeat_Check_default_instance_;
class Name_Repeat_Repost;
class Name_Repeat_RepostDefaultTypeInternal;
extern Name_Repeat_RepostDefaultTypeInternal _Name_Repeat_Repost_default_instance_;
}  // namespace LoginMessage
namespace google {
namespace protobuf {
template<> ::LoginMessage::MainMessage* Arena::CreateMaybeMessage<::LoginMessage::MainMessage>(Arena*);
template<> ::LoginMessage::Name_Repeat_Check* Arena::CreateMaybeMessage<::LoginMessage::Name_Repeat_Check>(Arena*);
template<> ::LoginMessage::Name_Repeat_Repost* Arena::CreateMaybeMessage<::LoginMessage::Name_Repeat_Repost>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LoginMessage {

enum MessageType {
  NAME_REPEAT_CHECK = 0,
  NAME_REPEAT_REPOST = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = NAME_REPEAT_CHECK;
const MessageType MessageType_MAX = NAME_REPEAT_REPOST;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Name_Repeat_Check : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginMessage.Name_Repeat_Check) */ {
 public:
  Name_Repeat_Check();
  virtual ~Name_Repeat_Check();

  Name_Repeat_Check(const Name_Repeat_Check& from);

  inline Name_Repeat_Check& operator=(const Name_Repeat_Check& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Name_Repeat_Check(Name_Repeat_Check&& from) noexcept
    : Name_Repeat_Check() {
    *this = ::std::move(from);
  }

  inline Name_Repeat_Check& operator=(Name_Repeat_Check&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Name_Repeat_Check& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name_Repeat_Check* internal_default_instance() {
    return reinterpret_cast<const Name_Repeat_Check*>(
               &_Name_Repeat_Check_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Name_Repeat_Check* other);
  friend void swap(Name_Repeat_Check& a, Name_Repeat_Check& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Name_Repeat_Check* New() const final {
    return CreateMaybeMessage<Name_Repeat_Check>(NULL);
  }

  Name_Repeat_Check* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Name_Repeat_Check>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Name_Repeat_Check& from);
  void MergeFrom(const Name_Repeat_Check& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Repeat_Check* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:LoginMessage.Name_Repeat_Check)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MyEngineMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Name_Repeat_Repost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginMessage.Name_Repeat_Repost) */ {
 public:
  Name_Repeat_Repost();
  virtual ~Name_Repeat_Repost();

  Name_Repeat_Repost(const Name_Repeat_Repost& from);

  inline Name_Repeat_Repost& operator=(const Name_Repeat_Repost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Name_Repeat_Repost(Name_Repeat_Repost&& from) noexcept
    : Name_Repeat_Repost() {
    *this = ::std::move(from);
  }

  inline Name_Repeat_Repost& operator=(Name_Repeat_Repost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Name_Repeat_Repost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name_Repeat_Repost* internal_default_instance() {
    return reinterpret_cast<const Name_Repeat_Repost*>(
               &_Name_Repeat_Repost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Name_Repeat_Repost* other);
  friend void swap(Name_Repeat_Repost& a, Name_Repeat_Repost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Name_Repeat_Repost* New() const final {
    return CreateMaybeMessage<Name_Repeat_Repost>(NULL);
  }

  Name_Repeat_Repost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Name_Repeat_Repost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Name_Repeat_Repost& from);
  void MergeFrom(const Name_Repeat_Repost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Repeat_Repost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:LoginMessage.Name_Repeat_Repost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MyEngineMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MainMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginMessage.MainMessage) */ {
 public:
  MainMessage();
  virtual ~MainMessage();

  MainMessage(const MainMessage& from);

  inline MainMessage& operator=(const MainMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MainMessage(MainMessage&& from) noexcept
    : MainMessage() {
    *this = ::std::move(from);
  }

  inline MainMessage& operator=(MainMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MainMessage& default_instance();

  enum ContentCase {
    kContent1 = 2,
    kContent2 = 3,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MainMessage* internal_default_instance() {
    return reinterpret_cast<const MainMessage*>(
               &_MainMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MainMessage* other);
  friend void swap(MainMessage& a, MainMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MainMessage* New() const final {
    return CreateMaybeMessage<MainMessage>(NULL);
  }

  MainMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MainMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MainMessage& from);
  void MergeFrom(const MainMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LoginMessage.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::LoginMessage::MessageType type() const;
  void set_type(::LoginMessage::MessageType value);

  // .LoginMessage.Name_Repeat_Check content1 = 2;
  bool has_content1() const;
  void clear_content1();
  static const int kContent1FieldNumber = 2;
  private:
  const ::LoginMessage::Name_Repeat_Check& _internal_content1() const;
  public:
  const ::LoginMessage::Name_Repeat_Check& content1() const;
  ::LoginMessage::Name_Repeat_Check* release_content1();
  ::LoginMessage::Name_Repeat_Check* mutable_content1();
  void set_allocated_content1(::LoginMessage::Name_Repeat_Check* content1);

  // .LoginMessage.Name_Repeat_Repost content2 = 3;
  bool has_content2() const;
  void clear_content2();
  static const int kContent2FieldNumber = 3;
  private:
  const ::LoginMessage::Name_Repeat_Repost& _internal_content2() const;
  public:
  const ::LoginMessage::Name_Repeat_Repost& content2() const;
  ::LoginMessage::Name_Repeat_Repost* release_content2();
  ::LoginMessage::Name_Repeat_Repost* mutable_content2();
  void set_allocated_content2(::LoginMessage::Name_Repeat_Repost* content2);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:LoginMessage.MainMessage)
 private:
  void set_has_content1();
  void set_has_content2();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ContentUnion {
    ContentUnion() {}
    ::LoginMessage::Name_Repeat_Check* content1_;
    ::LoginMessage::Name_Repeat_Repost* content2_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_MyEngineMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Name_Repeat_Check

// bytes name = 1;
inline void Name_Repeat_Check::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Name_Repeat_Check::name() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Check.name)
  return name_.GetNoArena();
}
inline void Name_Repeat_Check::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Check.name)
}
#if LANG_CXX11
inline void Name_Repeat_Check::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginMessage.Name_Repeat_Check.name)
}
#endif
inline void Name_Repeat_Check::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginMessage.Name_Repeat_Check.name)
}
inline void Name_Repeat_Check::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginMessage.Name_Repeat_Check.name)
}
inline ::std::string* Name_Repeat_Check::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:LoginMessage.Name_Repeat_Check.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name_Repeat_Check::release_name() {
  // @@protoc_insertion_point(field_release:LoginMessage.Name_Repeat_Check.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name_Repeat_Check::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LoginMessage.Name_Repeat_Check.name)
}

// -------------------------------------------------------------------

// Name_Repeat_Repost

// bytes name = 1;
inline void Name_Repeat_Repost::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Name_Repeat_Repost::name() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Repost.name)
  return name_.GetNoArena();
}
inline void Name_Repeat_Repost::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Repost.name)
}
#if LANG_CXX11
inline void Name_Repeat_Repost::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginMessage.Name_Repeat_Repost.name)
}
#endif
inline void Name_Repeat_Repost::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginMessage.Name_Repeat_Repost.name)
}
inline void Name_Repeat_Repost::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginMessage.Name_Repeat_Repost.name)
}
inline ::std::string* Name_Repeat_Repost::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:LoginMessage.Name_Repeat_Repost.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name_Repeat_Repost::release_name() {
  // @@protoc_insertion_point(field_release:LoginMessage.Name_Repeat_Repost.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name_Repeat_Repost::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LoginMessage.Name_Repeat_Repost.name)
}

// bool state = 2;
inline void Name_Repeat_Repost::clear_state() {
  state_ = false;
}
inline bool Name_Repeat_Repost::state() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Repost.state)
  return state_;
}
inline void Name_Repeat_Repost::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Repost.state)
}

// -------------------------------------------------------------------

// MainMessage

// .LoginMessage.MessageType type = 1;
inline void MainMessage::clear_type() {
  type_ = 0;
}
inline ::LoginMessage::MessageType MainMessage::type() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.type)
  return static_cast< ::LoginMessage::MessageType >(type_);
}
inline void MainMessage::set_type(::LoginMessage::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LoginMessage.MainMessage.type)
}

// .LoginMessage.Name_Repeat_Check content1 = 2;
inline bool MainMessage::has_content1() const {
  return content_case() == kContent1;
}
inline void MainMessage::set_has_content1() {
  _oneof_case_[0] = kContent1;
}
inline void MainMessage::clear_content1() {
  if (has_content1()) {
    delete content_.content1_;
    clear_has_content();
  }
}
inline const ::LoginMessage::Name_Repeat_Check& MainMessage::_internal_content1() const {
  return *content_.content1_;
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::release_content1() {
  // @@protoc_insertion_point(field_release:LoginMessage.MainMessage.content1)
  if (has_content1()) {
    clear_has_content();
      ::LoginMessage::Name_Repeat_Check* temp = content_.content1_;
    content_.content1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LoginMessage::Name_Repeat_Check& MainMessage::content1() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.content1)
  return has_content1()
      ? *content_.content1_
      : *reinterpret_cast< ::LoginMessage::Name_Repeat_Check*>(&::LoginMessage::_Name_Repeat_Check_default_instance_);
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::mutable_content1() {
  if (!has_content1()) {
    clear_content();
    set_has_content1();
    content_.content1_ = CreateMaybeMessage< ::LoginMessage::Name_Repeat_Check >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LoginMessage.MainMessage.content1)
  return content_.content1_;
}

// .LoginMessage.Name_Repeat_Repost content2 = 3;
inline bool MainMessage::has_content2() const {
  return content_case() == kContent2;
}
inline void MainMessage::set_has_content2() {
  _oneof_case_[0] = kContent2;
}
inline void MainMessage::clear_content2() {
  if (has_content2()) {
    delete content_.content2_;
    clear_has_content();
  }
}
inline const ::LoginMessage::Name_Repeat_Repost& MainMessage::_internal_content2() const {
  return *content_.content2_;
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::release_content2() {
  // @@protoc_insertion_point(field_release:LoginMessage.MainMessage.content2)
  if (has_content2()) {
    clear_has_content();
      ::LoginMessage::Name_Repeat_Repost* temp = content_.content2_;
    content_.content2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LoginMessage::Name_Repeat_Repost& MainMessage::content2() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.content2)
  return has_content2()
      ? *content_.content2_
      : *reinterpret_cast< ::LoginMessage::Name_Repeat_Repost*>(&::LoginMessage::_Name_Repeat_Repost_default_instance_);
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::mutable_content2() {
  if (!has_content2()) {
    clear_content();
    set_has_content2();
    content_.content2_ = CreateMaybeMessage< ::LoginMessage::Name_Repeat_Repost >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LoginMessage.MainMessage.content2)
  return content_.content2_;
}

inline bool MainMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void MainMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline MainMessage::ContentCase MainMessage::content_case() const {
  return MainMessage::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginMessage

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginMessage::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginMessage::MessageType>() {
  return ::LoginMessage::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MyEngineMessage_2eproto
